<?php

class ReservationsController extends Controller {

    public function index() {
        $this->view->render();
    }

    public function add() {
        if (isset($_SESSION['user_id'])) {
            if (is('post')) {
                debug($_POST);
            }

            $this->view->set([
                'times' => $this->get_times_list(date('Y-m-d')),
                'amountMax' => $this->get_max_amount(date('Y-m-d'))
            ]);
            $this->view->render();
        }
        else {
            $this->redirect('/users/login');
        }
    }

    public function get_schedule() {
        if (is('post')) {
            $date = date('Y-m-d', strtotime($_POST['date']));
            echo json_encode(array($this->get_times_list($date), $this->get_max_amount($date)));
        }
    }

    public function get_availability() {
        if (is('post')) {
            $date = $_POST['date'];
            $time = $_POST['time'];
            $duration = $_POST['duration'];
            $amount = $_POST['amount'];

            if (strtotime($time) + BOOKING_TIME <= time()) {
                echo json_encode(array('success' => false));
                return;
            }

            if (!$this->check_availability($date, $time, $duration, $amount)) {
                echo json_encode(array('success' => false));
                return;
            }
            else {
                echo json_encode(array('success' => true));
            }
        }
    }

    public function add_availablity() {
        $this->view->set('list', $this->list_reservations(date('Y-m-d')));
        $this->view->element('reservations/add_menu');
    }

    /**
     * Returns true or false depending on if the date, time, duration and amount are available. It first retrieves a list of the reservations for the day.
     * Then checks the given time and duration. Then if the maximum amount is preceded it returns false. Returns true by default.
     * Date must be in 'Y-m-d' format and time in 'H:i:s' format.
     * @param date $date
     * @param date $time
     * @param int $duration
     * @param int $amount
     * @return boolean
     */
    private function check_availability($date, $time, $duration, $amount) {
        $date = date('Y-m-d', strtotime($date));
        $maxAmount = $this->get_max_amount($date);
        $list = $this->list_reservations($date);

        for ($i = 0; $i <= $duration / INTERVAL; $i++) {
            $currentTime = date('H:i:s', strtotime($time) + INTERVAL * $i);

            if ($list[$currentTime] + $amount > $maxAmount) {
                return false;
            }
        }
        return true;
    }

    /**
     * Returns an array with the amount of reservations for each interval. Returns the array with the key as a time('H:i:s') and the value the number of reservations.
     * @param date $date
     * @return array
     */
    private function list_reservations($date) {
        $date = date('Y-m-d', strtotime($date));
        $sql = 'SELECT * FROM `reservations` WHERE `date` = "' . $date . '"';

        $Reservation = new ReservationModel();
        $reservations = $Reservation->findAllBySql($sql);

        for ($i = 0; $i <= DAY; $i += INTERVAL) {
            $peopleBooked = 0;
            $currentTime = date('H:i:s', $i);
            if ($reservations) {
                foreach ($reservations as $reservation) {
                    if (($reservation->time >= $currentTime || $reservation->timeEnd >= $currentTime) && ($reservation->time <= $currentTime || $reservation->timeEnd <= $currentTime)) {
                        $peopleBooked += $reservation->amount;
                    }
                }
            }
            $list[$currentTime] = $peopleBooked;
        }
        return $list;
    }

    /**
     * Get a list of the times available for selecting requires a date in the following format 'Y-m-d'.
     * Return a list with the key of a type time('H:i:s') and the value 'H:i'. It gets the times from the schedule if the schedule exists.
     * Else it grabs the default times.
     * @param date $date
     * @return array
     */
    private function get_times_list($date) {
        $schedule = new ScheduleModel();
        $schedule->find(array('conditions' => array('date' => $date)));

        if ($schedule->id) {
            $timeStart = $schedule->timeStart;
            $timeEnd = $schedule->timeEnd;
        }
        else {
            $timeStart = DEFAULT_TIME_START;
            $timeEnd = DEFAULT_TIME_END;
        }

        $list = array();
        for ($i = strtotime($timeStart); $i <= strtotime($timeEnd); $i += INTERVAL) {
            $list[date('H:i:s', $i)] = date('H:i', $i);
        }
        return $list;
    }

    /**
     * Returns the maximum amount of people that are allowed to reserve. Requires the date. If a schedule has been found it retrieves the amount, else it 
     * retrieves the default value.
     * Requires the date in the following format 'Y-m-d'.
     * @param date $date
     * @return int
     */
    private function get_max_amount($date) {
        $schedule = new ScheduleModel();
        $schedule->find(array('conditions' => array('date' => $date)));

        if ($schedule->amount) {
            return $schedule->amount;
        }
        return DEFAULT_MAX;
    }

}